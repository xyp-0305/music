(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.XTemplateCompiler = {}));
}(this, function (exports) { 'use strict';

  /*
    Generated by kison.
  */
  var parser = function (undefined$1) {
    /*jshint quotmark:false, loopfunc:true, indent:false, unused:false, asi:true, boss:true*/

    /* Generated by kison */
    var parser = {};
    var GrammarConst = {
      SHIFT_TYPE: 1,
      REDUCE_TYPE: 2,
      ACCEPT_TYPE: 0,
      TYPE_INDEX: 0,
      PRODUCTION_INDEX: 1,
      TO_INDEX: 2
    };

    function peekStack(stack, n) {
      n = n || 1;
      return stack[stack.length - n];
    }
    /*jslint quotmark: false*/

    /*jslint quotmark: false*/


    function mix(to, from) {
      for (var f in from) {
        to[f] = from[f];
      }
    }

    function isArray(obj) {
      return '[object Array]' === Object.prototype.toString.call(obj);
    }

    function each(object, fn, context) {
      if (object) {
        var key,
            val,
            length,
            i = 0;
        context = context || null;

        if (!isArray(object)) {
          for (key in object) {
            // can not use hasOwnProperty
            if (fn.call(context, object[key], key, object) === false) {
              break;
            }
          }
        } else {
          length = object.length;

          for (val = object[0]; i < length; val = object[++i]) {
            if (fn.call(context, val, i, object) === false) {
              break;
            }
          }
        }
      }
    }

    function inArray(item, arr) {
      for (var i = 0, l = arr.length; i < l; i++) {
        if (arr[i] === item) {
          return true;
        }
      }

      return false;
    }

    var Lexer = function Lexer(cfg) {
      var self = this;
      /*
      lex rules.
      @type {Object[]}
      @example
      [
      {
      regexp:'\\w+',
      state:['xx'],
      token:'c',
      // this => lex
      action:function(){}
      }
      ]
      */

      /*
       lex rules.
       @type {Object[]}
       @example
       [
       {
       regexp:'\\w+',
       state:['xx'],
       token:'c',
       // this => lex
       action:function(){}
       }
       ]
       */

      self.rules = [];
      mix(self, cfg);
      /*
      Input languages
      @type {String}
      */

      /*
       Input languages
       @type {String}
       */

      self.resetInput(self.input);
    };

    Lexer.prototype = {
      resetInput: function resetInput(input) {
        mix(this, {
          input: input,
          matched: '',
          stateStack: [Lexer.STATIC.INITIAL],
          match: '',
          text: '',
          firstLine: 1,
          lineNumber: 1,
          lastLine: 1,
          firstColumn: 1,
          lastColumn: 1
        });
      },
      getCurrentRules: function getCurrentRules() {
        var self = this,
            currentState = self.stateStack[self.stateStack.length - 1],
            rules = []; //#JSCOVERAGE_IF
        //#JSCOVERAGE_IF

        if (self.mapState) {
          currentState = self.mapState(currentState);
        }

        each(self.rules, function (r) {
          var state = r.state || r[3];

          if (!state) {
            if (currentState === Lexer.STATIC.INITIAL) {
              rules.push(r);
            }
          } else if (inArray(currentState, state)) {
            rules.push(r);
          }
        });
        return rules;
      },
      pushState: function pushState(state) {
        this.stateStack.push(state);
      },
      popState: function popState(num) {
        num = num || 1;
        var ret;

        while (num--) {
          ret = this.stateStack.pop();
        }

        return ret;
      },
      showDebugInfo: function showDebugInfo() {
        var self = this,
            DEBUG_CONTEXT_LIMIT = Lexer.STATIC.DEBUG_CONTEXT_LIMIT,
            matched = self.matched,
            match = self.match,
            input = self.input;
        matched = matched.slice(0, matched.length - match.length); //#JSCOVERAGE_IF 0
        //#JSCOVERAGE_IF 0

        var past = (matched.length > DEBUG_CONTEXT_LIMIT ? '...' : '') + matched.slice(0 - DEBUG_CONTEXT_LIMIT).replace(/\n/g, ' '),
            next = match + input; //#JSCOVERAGE_ENDIF
        //#JSCOVERAGE_ENDIF

        next = next.slice(0, DEBUG_CONTEXT_LIMIT).replace(/\n/g, ' ') + (next.length > DEBUG_CONTEXT_LIMIT ? '...' : '');
        return past + next + '\n' + new Array(past.length + 1).join('-') + '^';
      },
      mapSymbol: function mapSymbolForCodeGen(t) {
        return this.symbolMap[t];
      },
      mapReverseSymbol: function mapReverseSymbol(rs) {
        var self = this,
            symbolMap = self.symbolMap,
            i,
            reverseSymbolMap = self.reverseSymbolMap;

        if (!reverseSymbolMap && symbolMap) {
          reverseSymbolMap = self.reverseSymbolMap = {};

          for (i in symbolMap) {
            reverseSymbolMap[symbolMap[i]] = i;
          }
        } //#JSCOVERAGE_IF
        //#JSCOVERAGE_IF


        if (reverseSymbolMap) {
          return reverseSymbolMap[rs];
        } else {
          return rs;
        }
      },
      lex: function lex() {
        var self = this,
            input = self.input,
            i,
            rule,
            m,
            ret,
            lines,
            rules = self.getCurrentRules();
        self.match = self.text = '';

        if (!input) {
          return self.mapSymbol(Lexer.STATIC.END_TAG);
        }

        for (i = 0; i < rules.length; i++) {
          rule = rules[i]; //#JSCOVERAGE_IF 0
          //#JSCOVERAGE_IF 0

          var regexp = rule.regexp || rule[1],
              token = rule.token || rule[0],
              action = rule.action || rule[2] || undefined$1; //#JSCOVERAGE_ENDIF
          //#JSCOVERAGE_ENDIF

          if (m = input.match(regexp)) {
            lines = m[0].match(/\n.*/g);

            if (lines) {
              self.lineNumber += lines.length;
            }

            mix(self, {
              firstLine: self.lastLine,
              lastLine: self.lineNumber,
              firstColumn: self.lastColumn,
              lastColumn: lines ? lines[lines.length - 1].length - 1 : self.lastColumn + m[0].length
            });
            var match; // for error report
            // for error report

            match = self.match = m[0]; // all matches
            // all matches

            self.matches = m; // may change by user
            // may change by user

            self.text = match; // matched content utils now
            // matched content utils now

            self.matched += match;
            ret = action && action.call(self);

            if (ret === undefined$1) {
              ret = token;
            } else {
              ret = self.mapSymbol(ret);
            }

            input = input.slice(match.length);
            self.input = input;

            if (ret) {
              return ret;
            } else {
              // ignore
              return self.lex();
            }
          }
        }
      }
    };
    Lexer.STATIC = {
      INITIAL: 'I',
      DEBUG_CONTEXT_LIMIT: 20,
      END_TAG: '$EOF'
    };
    var lexer = new Lexer({
      rules: [[0, /^[\s\S]*?(?={{)/, function () {
        var self = this,
            text = self.text,
            m,
            n = 0;

        if (m = text.match(/\\+$/)) {
          n = m[0].length;
        }

        if (n % 2) {
          self.pushState('et');
          text = text.slice(0, -1);
        } else {
          self.pushState('t');
        }

        if (n) {
          text = text.replace(/\\+$/g, function (m) {
            return new Array(m.length / 2 + 1).join('\\');
          });
        } // https://github.com/kissyteam/kissy/issues/330
        // return even empty
        // https://github.com/kissyteam/kissy/issues/330
        // return even empty


        self.text = text;
        return 'CONTENT';
      }], ['b', /^[\s\S]+/, 0], ['b', /^[\s\S]{2,}?(?:(?={{)|$)/, function popState() {
        this.popState();
      }, ['et']], ['c', /^{{\{?~?(?:#|@)/, function () {
        var self = this,
            text = self.text;

        if (text.slice(0, 3) === '{{{') {
          self.pushState('p');
        } else {
          self.pushState('e');
        }
      }, ['t']], ['d', /^{{\{?~?\//, function () {
        var self = this,
            text = self.text;

        if (text.slice(0, 3) === '{{{') {
          self.pushState('p');
        } else {
          self.pushState('e');
        }
      }, ['t']], ['e', /^{{\s*else\s*}}/, function popState() {
        this.popState();
      }, ['t']], [0, /^{{![\s\S]*?}}/, function popState() {
        this.popState();
      }, ['t']], ['b', /^{{%([\s\S]*?)%}}/, function () {
        // return to content mode
        this.text = this.matches[1] || '';
        this.popState();
      }, ['t']], ['f', /^{{\{?~?/, function () {
        var self = this,
            text = self.text;

        if (text.slice(0, 3) === '{{{') {
          self.pushState('p');
        } else {
          self.pushState('e');
        }
      }, ['t']], [0, /^\s+/, 0, ['p', 'e']], ['g', /^,/, 0, ['p', 'e']], ['h', /^~?}}}/, function () {
        this.popState(2);
      }, ['p']], ['h', /^~?}}/, function () {
        this.popState(2);
      }, ['e']], ['i', /^\(/, 0, ['p', 'e']], ['j', /^\)/, 0, ['p', 'e']], ['k', /^\|\|/, 0, ['p', 'e']], ['l', /^&&/, 0, ['p', 'e']], ['m', /^===/, 0, ['p', 'e']], ['n', /^!==/, 0, ['p', 'e']], ['o', /^>=/, 0, ['p', 'e']], ['p', /^<=/, 0, ['p', 'e']], ['q', /^>/, 0, ['p', 'e']], ['r', /^</, 0, ['p', 'e']], ['s', /^\+/, 0, ['p', 'e']], ['t', /^-/, 0, ['p', 'e']], ['u', /^\*/, 0, ['p', 'e']], ['v', /^\//, 0, ['p', 'e']], ['w', /^%/, 0, ['p', 'e']], ['x', /^!/, 0, ['p', 'e']], ['y', /^"(\\[\s\S]|[^\\"\n])*"/, function () {
        this.text = this.text.slice(1, -1).replace(/\\"/g, '"');
      }, ['p', 'e']], ['y', /^'(\\[\s\S]|[^\\'\n])*'/, function () {
        this.text = this.text.slice(1, -1).replace(/\\'/g, "'");
      }, ['p', 'e']], ['z', /^\d+(?:\.\d+)?(?:e-?\d+)?/i, 0, ['p', 'e']], ['aa', /^=/, 0, ['p', 'e']], ['ab', /^\.\./, function () {
        // wait for '/'
        this.pushState('ws');
      }, ['p', 'e']], ['ac', /^\//, function popState() {
        this.popState();
      }, ['ws']], ['ac', /^\./, 0, ['p', 'e']], ['ad', /^\[/, 0, ['p', 'e']], ['ae', /^\]/, 0, ['p', 'e']], ['af', /^\{/, 0, ['p', 'e']], ['ag', /^\:/, 0, ['p', 'e']], ['ah', /^\?/, 0, ['p', 'e']], ['ai', /^\}/, 0, ['p', 'e']], ['ab', /^[a-zA-Z_$][a-zA-Z0-9_$]*/, 0, ['p', 'e']]]
    });
    parser.lexer = lexer;
    lexer.symbolMap = {
      $EOF: 'a',
      CONTENT: 'b',
      OPEN_BLOCK: 'c',
      OPEN_CLOSE_BLOCK: 'd',
      INVERSE: 'e',
      OPEN_TPL: 'f',
      COMMA: 'g',
      CLOSE: 'h',
      L_PAREN: 'i',
      R_PAREN: 'j',
      OR: 'k',
      AND: 'l',
      LOGIC_EQUALS: 'm',
      LOGIC_NOT_EQUALS: 'n',
      GE: 'o',
      LE: 'p',
      GT: 'q',
      LT: 'r',
      PLUS: 's',
      MINUS: 't',
      MULTIPLY: 'u',
      DIVIDE: 'v',
      MODULUS: 'w',
      NOT: 'x',
      STRING: 'y',
      NUMBER: 'z',
      EQUALS: 'aa',
      ID: 'ab',
      SEP: 'ac',
      L_BRACKET: 'ad',
      R_BRACKET: 'ae',
      L_BRACE: 'af',
      COLON: 'ag',
      QUERY: 'ah',
      R_BRACE: 'ai',
      $START: 'aj',
      program: 'ak',
      statements: 'al',
      statement: 'am',
      "function": 'an',
      id: 'ao',
      expression: 'ap',
      params: 'aq',
      hash: 'ar',
      param: 'as',
      conditionalExpression: 'at',
      listExpression: 'au',
      objectExpression: 'av',
      objectPart: 'aw',
      conditionalOrExpression: 'ax',
      conditionalAndExpression: 'ay',
      equalityExpression: 'az',
      relationalExpression: 'ba',
      additiveExpression: 'bb',
      multiplicativeExpression: 'bc',
      unaryExpression: 'bd',
      primaryExpression: 'be',
      hashSegment: 'bf',
      idSegments: 'bg'
    };
    parser.productions = [['aj', ['ak']], ['ak', ['al', 'e', 'al'], function () {
      return new this.yy.ProgramNode({
        filename: this.lexer.filename,
        line: this.lexer.firstLine,
        col: this.lexer.firstColumn
      }, this.$1, this.$3);
    }], ['ak', ['al'], function () {
      return new this.yy.ProgramNode({
        filename: this.lexer.filename,
        line: this.lexer.firstLine,
        col: this.lexer.firstColumn
      }, this.$1);
    }], ['al', ['am'], function () {
      return [this.$1];
    }], ['al', ['al', 'am'], function () {
      var statements = this.$1;
      var statement = this.$2;

      if (statements.length) {
        var lastStatement = statements[statements.length - 1];

        if (lastStatement.rtrim && statement && statement.type === 'contentStatement' && !statement.value.trim()) ; else if (statement.ltrim && lastStatement && lastStatement.type === 'contentStatement' && !lastStatement.value.trim()) {
          statements[statements.length - 1] = statement;
        } else {
          statements.push(statement);
        }
      } else {
        statements.push(statement);
      }
    }], ['am', ['c', 'an', 'h', 'ak', 'd', 'ao', 'h'], function () {
      var program = this.$4;
      var openBlock = this.$1;
      var lastClose = this.$7;
      var statements = program.statements;
      var close = this.$3;
      var openCloseBlock = this.$5;

      if (close.indexOf('~}') !== -1 && statements[0] && statements[0].type === 'contentStatement') {
        if (!statements[0].value.trim()) {
          statements.shift();
        }
      }

      if (openCloseBlock.indexOf('{~') !== -1 && statements[statements.length - 1] && statements[statements.length - 1].type === 'contentStatement') {
        if (!statements[statements.length - 1].value.trim()) {
          statements.pop();
        }
      }

      var statement = new this.yy.BlockStatement({
        filename: this.lexer.filename,
        line: this.lexer.firstLine,
        col: this.lexer.firstColumn
      }, this.$2, program, this.$6, this.$1.slice(0, 3) !== '{{{');

      if (openBlock.indexOf('{~') !== -1) {
        statement.ltrim = 1;
      }

      if (lastClose.indexOf('~}') !== -1) {
        statement.rtrim = 1;
      }

      return statement;
    }], ['am', ['f', 'ap', 'h'], function () {
      var openTpl = this.$1;
      var close = this.$3;
      var statement = new this.yy.ExpressionStatement({
        filename: this.lexer.filename,
        line: this.lexer.firstLine,
        col: this.lexer.firstColumn
      }, this.$2, this.$1.slice(0, 3) !== '{{{');

      if (openTpl.indexOf('{~') !== -1) {
        statement.ltrim = 1;
      }

      if (close.indexOf('~}') !== -1) {
        statement.rtrim = 1;
      }

      return statement;
    }], ['am', ['b'], function () {
      return new this.yy.ContentStatement({
        filename: this.lexer.filename,
        line: this.lexer.firstLine,
        col: this.lexer.firstColumn
      }, this.$1);
    }], ['an', ['ao', 'i', 'aq', 'g', 'ar', 'j'], function () {
      return new this.yy.Function({
        filename: this.lexer.filename,
        line: this.lexer.firstLine,
        col: this.lexer.firstColumn
      }, this.$1, this.$3, this.$5);
    }], ['an', ['ao', 'i', 'aq', 'j'], function () {
      return new this.yy.Function({
        filename: this.lexer.filename,
        line: this.lexer.firstLine,
        col: this.lexer.firstColumn
      }, this.$1, this.$3);
    }], ['an', ['ao', 'i', 'ar', 'j'], function () {
      return new this.yy.Function({
        filename: this.lexer.filename,
        line: this.lexer.firstLine,
        col: this.lexer.firstColumn
      }, this.$1, null, this.$3);
    }], ['an', ['ao', 'i', 'j'], function () {
      return new this.yy.Function({
        filename: this.lexer.filename,
        line: this.lexer.firstLine,
        col: this.lexer.firstColumn
      }, this.$1);
    }], ['aq', ['aq', 'g', 'as'], function () {
      this.$1.push(this.$3);
    }], ['aq', ['as'], function () {
      return [this.$1];
    }], ['as', ['ap']], ['ap', ['at']], ['ap', ['ad', 'au', 'ae'], function () {
      return new this.yy.ArrayExpression(this.$2);
    }], ['ap', ['ad', 'ae'], function () {
      return new this.yy.ArrayExpression([]);
    }], ['ap', ['af', 'av', 'ai'], function () {
      return new this.yy.ObjectExpression(this.$2);
    }], ['ap', ['af', 'ai'], function () {
      return new this.yy.ObjectExpression([]);
    }], ['aw', ['y', 'ag', 'ap'], function () {
      return [this.$1, this.$3];
    }], ['aw', ['ab', 'ag', 'ap'], function () {
      return [this.$1, this.$3];
    }], ['av', ['aw'], function () {
      return [this.$1];
    }], ['av', ['av', 'g', 'aw'], function () {
      this.$1.push(this.$3);
    }], ['au', ['ap'], function () {
      return [this.$1];
    }], ['au', ['au', 'g', 'ap'], function () {
      this.$1.push(this.$3);
    }], ['at', ['ax']], ['at', ['ax', 'ah', 'ax', 'ag', 'at'], function () {
      return new this.yy.ConditionalExpression(this.$1, this.$3, this.$5);
    }], ['ax', ['ay']], ['ax', ['ax', 'k', 'ay'], function () {
      return new this.yy.ConditionalOrExpression(this.$1, this.$3);
    }], ['ay', ['az']], ['ay', ['ay', 'l', 'az'], function () {
      return new this.yy.ConditionalAndExpression(this.$1, this.$3);
    }], ['az', ['ba']], ['az', ['az', 'm', 'ba'], function () {
      return new this.yy.EqualityExpression(this.$1, '===', this.$3);
    }], ['az', ['az', 'n', 'ba'], function () {
      return new this.yy.EqualityExpression(this.$1, '!==', this.$3);
    }], ['ba', ['bb']], ['ba', ['ba', 'r', 'bb'], function () {
      return new this.yy.RelationalExpression(this.$1, '<', this.$3);
    }], ['ba', ['ba', 'q', 'bb'], function () {
      return new this.yy.RelationalExpression(this.$1, '>', this.$3);
    }], ['ba', ['ba', 'p', 'bb'], function () {
      return new this.yy.RelationalExpression(this.$1, '<=', this.$3);
    }], ['ba', ['ba', 'o', 'bb'], function () {
      return new this.yy.RelationalExpression(this.$1, '>=', this.$3);
    }], ['bb', ['bc']], ['bb', ['bb', 's', 'bc'], function () {
      return new this.yy.AdditiveExpression(this.$1, '+', this.$3);
    }], ['bb', ['bb', 't', 'bc'], function () {
      return new this.yy.AdditiveExpression(this.$1, '-', this.$3);
    }], ['bc', ['bd']], ['bc', ['bc', 'u', 'bd'], function () {
      return new this.yy.MultiplicativeExpression(this.$1, '*', this.$3);
    }], ['bc', ['bc', 'v', 'bd'], function () {
      return new this.yy.MultiplicativeExpression(this.$1, '/', this.$3);
    }], ['bc', ['bc', 'w', 'bd'], function () {
      return new this.yy.MultiplicativeExpression(this.$1, '%', this.$3);
    }], ['bd', ['x', 'bd'], function () {
      return new this.yy.UnaryExpression(this.$1, this.$2);
    }], ['bd', ['t', 'bd'], function () {
      return new this.yy.UnaryExpression(this.$1, this.$2);
    }], ['bd', ['be']], ['be', ['y'], function () {
      return new this.yy.String({
        line: this.lexer.firstLine,
        col: this.lexer.firstColumn
      }, this.$1);
    }], ['be', ['z'], function () {
      return new this.yy.Number({
        line: this.lexer.firstLine,
        col: this.lexer.firstColumn
      }, this.$1);
    }], ['be', ['ao']], ['be', ['i', 'ap', 'j'], function () {
      return this.$2;
    }], ['ar', ['ar', 'g', 'bf'], function () {
      this.$1.value.push(this.$3);
    }], ['ar', ['bf'], function () {
      return new this.yy.Hash({
        line: this.lexer.firstLine,
        col: this.lexer.firstColumn
      }, [this.$1]);
    }], ['bf', ['ao', 'aa', 'ap'], function () {
      return [this.$1, this.$3];
    }], ['ao', ['bg'], function () {
      return new this.yy.Id({
        line: this.lexer.firstLine,
        col: this.lexer.firstColumn
      }, this.$1);
    }], ['bg', ['an'], function () {
      return [this.$1];
    }], ['bg', ['bg', 'ac', 'ab'], function () {
      this.$1.push(this.$3);
    }], ['bg', ['bg', 'ad', 'ap', 'ae'], function () {
      this.$1.push(this.$3);
    }], ['bg', ['ab'], function () {
      return [this.$1];
    }]];
    parser.table = {
      gotos: {
        '0': {
          ak: 4,
          al: 5,
          am: 6
        },
        '2': {
          an: 8,
          ao: 9,
          bg: 10
        },
        '3': {
          an: 18,
          ao: 19,
          ap: 20,
          at: 21,
          ax: 22,
          ay: 23,
          az: 24,
          ba: 25,
          bb: 26,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '5': {
          am: 31
        },
        '11': {
          an: 18,
          ao: 19,
          ap: 36,
          at: 21,
          ax: 22,
          ay: 23,
          az: 24,
          ba: 25,
          bb: 26,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '12': {
          an: 18,
          ao: 19,
          bd: 37,
          be: 29,
          bg: 10
        },
        '13': {
          an: 18,
          ao: 19,
          bd: 38,
          be: 29,
          bg: 10
        },
        '16': {
          an: 18,
          ao: 19,
          ap: 40,
          at: 21,
          au: 41,
          ax: 22,
          ay: 23,
          az: 24,
          ba: 25,
          bb: 26,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '17': {
          av: 45,
          aw: 46
        },
        '30': {
          al: 62,
          am: 6
        },
        '32': {
          ak: 63,
          al: 5,
          am: 6
        },
        '33': {
          an: 18,
          ao: 65,
          ap: 66,
          aq: 67,
          ar: 68,
          as: 69,
          at: 21,
          ax: 22,
          ay: 23,
          az: 24,
          ba: 25,
          bb: 26,
          bc: 27,
          bd: 28,
          be: 29,
          bf: 70,
          bg: 10
        },
        '35': {
          an: 18,
          ao: 19,
          ap: 72,
          at: 21,
          ax: 22,
          ay: 23,
          az: 24,
          ba: 25,
          bb: 26,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '48': {
          an: 18,
          ao: 19,
          ay: 80,
          az: 24,
          ba: 25,
          bb: 26,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '49': {
          an: 18,
          ao: 19,
          ax: 81,
          ay: 23,
          az: 24,
          ba: 25,
          bb: 26,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '50': {
          an: 18,
          ao: 19,
          az: 82,
          ba: 25,
          bb: 26,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '51': {
          an: 18,
          ao: 19,
          ba: 83,
          bb: 26,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '52': {
          an: 18,
          ao: 19,
          ba: 84,
          bb: 26,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '53': {
          an: 18,
          ao: 19,
          bb: 85,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '54': {
          an: 18,
          ao: 19,
          bb: 86,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '55': {
          an: 18,
          ao: 19,
          bb: 87,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '56': {
          an: 18,
          ao: 19,
          bb: 88,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '57': {
          an: 18,
          ao: 19,
          bc: 89,
          bd: 28,
          be: 29,
          bg: 10
        },
        '58': {
          an: 18,
          ao: 19,
          bc: 90,
          bd: 28,
          be: 29,
          bg: 10
        },
        '59': {
          an: 18,
          ao: 19,
          bd: 91,
          be: 29,
          bg: 10
        },
        '60': {
          an: 18,
          ao: 19,
          bd: 92,
          be: 29,
          bg: 10
        },
        '61': {
          an: 18,
          ao: 19,
          bd: 93,
          be: 29,
          bg: 10
        },
        '62': {
          am: 31
        },
        '74': {
          an: 18,
          ao: 19,
          ap: 101,
          at: 21,
          ax: 22,
          ay: 23,
          az: 24,
          ba: 25,
          bb: 26,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '76': {
          an: 18,
          ao: 19,
          ap: 102,
          at: 21,
          ax: 22,
          ay: 23,
          az: 24,
          ba: 25,
          bb: 26,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '77': {
          an: 18,
          ao: 19,
          ap: 103,
          at: 21,
          ax: 22,
          ay: 23,
          az: 24,
          ba: 25,
          bb: 26,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '78': {
          aw: 104
        },
        '94': {
          an: 18,
          ao: 106,
          bg: 10
        },
        '95': {
          an: 18,
          ao: 19,
          ap: 107,
          at: 21,
          ax: 22,
          ay: 23,
          az: 24,
          ba: 25,
          bb: 26,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        },
        '96': {
          an: 18,
          ao: 65,
          ap: 66,
          ar: 108,
          as: 109,
          at: 21,
          ax: 22,
          ay: 23,
          az: 24,
          ba: 25,
          bb: 26,
          bc: 27,
          bd: 28,
          be: 29,
          bf: 70,
          bg: 10
        },
        '98': {
          an: 18,
          ao: 110,
          bf: 111,
          bg: 10
        },
        '105': {
          an: 18,
          ao: 19,
          at: 112,
          ax: 22,
          ay: 23,
          az: 24,
          ba: 25,
          bb: 26,
          bc: 27,
          bd: 28,
          be: 29,
          bg: 10
        }
      },
      action: {
        '0': {
          b: [1, undefined$1, 1],
          c: [1, undefined$1, 2],
          f: [1, undefined$1, 3]
        },
        '1': {
          a: [2, 7],
          e: [2, 7],
          c: [2, 7],
          f: [2, 7],
          b: [2, 7],
          d: [2, 7]
        },
        '2': {
          ab: [1, undefined$1, 7]
        },
        '3': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7],
          ad: [1, undefined$1, 16],
          af: [1, undefined$1, 17]
        },
        '4': {
          a: [0]
        },
        '5': {
          a: [2, 2],
          d: [2, 2],
          b: [1, undefined$1, 1],
          c: [1, undefined$1, 2],
          e: [1, undefined$1, 30],
          f: [1, undefined$1, 3]
        },
        '6': {
          a: [2, 3],
          e: [2, 3],
          c: [2, 3],
          f: [2, 3],
          b: [2, 3],
          d: [2, 3]
        },
        '7': {
          i: [2, 61],
          ac: [2, 61],
          ad: [2, 61],
          h: [2, 61],
          ah: [2, 61],
          k: [2, 61],
          l: [2, 61],
          m: [2, 61],
          n: [2, 61],
          o: [2, 61],
          p: [2, 61],
          q: [2, 61],
          r: [2, 61],
          s: [2, 61],
          t: [2, 61],
          u: [2, 61],
          v: [2, 61],
          w: [2, 61],
          j: [2, 61],
          ae: [2, 61],
          g: [2, 61],
          aa: [2, 61],
          ag: [2, 61],
          ai: [2, 61]
        },
        '8': {
          i: [2, 58],
          ac: [2, 58],
          ad: [2, 58],
          h: [1, undefined$1, 32]
        },
        '9': {
          i: [1, undefined$1, 33]
        },
        '10': {
          i: [2, 57],
          h: [2, 57],
          ah: [2, 57],
          k: [2, 57],
          l: [2, 57],
          m: [2, 57],
          n: [2, 57],
          o: [2, 57],
          p: [2, 57],
          q: [2, 57],
          r: [2, 57],
          s: [2, 57],
          t: [2, 57],
          u: [2, 57],
          v: [2, 57],
          w: [2, 57],
          j: [2, 57],
          ae: [2, 57],
          g: [2, 57],
          aa: [2, 57],
          ag: [2, 57],
          ai: [2, 57],
          ac: [1, undefined$1, 34],
          ad: [1, undefined$1, 35]
        },
        '11': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7],
          ad: [1, undefined$1, 16],
          af: [1, undefined$1, 17]
        },
        '12': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '13': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '14': {
          h: [2, 50],
          ah: [2, 50],
          k: [2, 50],
          l: [2, 50],
          m: [2, 50],
          n: [2, 50],
          o: [2, 50],
          p: [2, 50],
          q: [2, 50],
          r: [2, 50],
          s: [2, 50],
          t: [2, 50],
          u: [2, 50],
          v: [2, 50],
          w: [2, 50],
          j: [2, 50],
          ae: [2, 50],
          g: [2, 50],
          ag: [2, 50],
          ai: [2, 50]
        },
        '15': {
          h: [2, 51],
          ah: [2, 51],
          k: [2, 51],
          l: [2, 51],
          m: [2, 51],
          n: [2, 51],
          o: [2, 51],
          p: [2, 51],
          q: [2, 51],
          r: [2, 51],
          s: [2, 51],
          t: [2, 51],
          u: [2, 51],
          v: [2, 51],
          w: [2, 51],
          j: [2, 51],
          ae: [2, 51],
          g: [2, 51],
          ag: [2, 51],
          ai: [2, 51]
        },
        '16': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7],
          ad: [1, undefined$1, 16],
          ae: [1, undefined$1, 39],
          af: [1, undefined$1, 17]
        },
        '17': {
          y: [1, undefined$1, 42],
          ab: [1, undefined$1, 43],
          ai: [1, undefined$1, 44]
        },
        '18': {
          h: [2, 58],
          ah: [2, 58],
          i: [2, 58],
          k: [2, 58],
          l: [2, 58],
          m: [2, 58],
          n: [2, 58],
          o: [2, 58],
          p: [2, 58],
          q: [2, 58],
          r: [2, 58],
          s: [2, 58],
          t: [2, 58],
          u: [2, 58],
          v: [2, 58],
          w: [2, 58],
          ac: [2, 58],
          ad: [2, 58],
          j: [2, 58],
          ae: [2, 58],
          g: [2, 58],
          aa: [2, 58],
          ag: [2, 58],
          ai: [2, 58]
        },
        '19': {
          h: [2, 52],
          ah: [2, 52],
          k: [2, 52],
          l: [2, 52],
          m: [2, 52],
          n: [2, 52],
          o: [2, 52],
          p: [2, 52],
          q: [2, 52],
          r: [2, 52],
          s: [2, 52],
          t: [2, 52],
          u: [2, 52],
          v: [2, 52],
          w: [2, 52],
          j: [2, 52],
          ae: [2, 52],
          g: [2, 52],
          ag: [2, 52],
          ai: [2, 52],
          i: [1, undefined$1, 33]
        },
        '20': {
          h: [1, undefined$1, 47]
        },
        '21': {
          h: [2, 15],
          j: [2, 15],
          ae: [2, 15],
          g: [2, 15],
          ai: [2, 15]
        },
        '22': {
          h: [2, 26],
          j: [2, 26],
          ae: [2, 26],
          g: [2, 26],
          ai: [2, 26],
          k: [1, undefined$1, 48],
          ah: [1, undefined$1, 49]
        },
        '23': {
          h: [2, 28],
          ah: [2, 28],
          k: [2, 28],
          j: [2, 28],
          ae: [2, 28],
          g: [2, 28],
          ag: [2, 28],
          ai: [2, 28],
          l: [1, undefined$1, 50]
        },
        '24': {
          h: [2, 30],
          ah: [2, 30],
          k: [2, 30],
          l: [2, 30],
          j: [2, 30],
          ae: [2, 30],
          g: [2, 30],
          ag: [2, 30],
          ai: [2, 30],
          m: [1, undefined$1, 51],
          n: [1, undefined$1, 52]
        },
        '25': {
          h: [2, 32],
          ah: [2, 32],
          k: [2, 32],
          l: [2, 32],
          m: [2, 32],
          n: [2, 32],
          j: [2, 32],
          ae: [2, 32],
          g: [2, 32],
          ag: [2, 32],
          ai: [2, 32],
          o: [1, undefined$1, 53],
          p: [1, undefined$1, 54],
          q: [1, undefined$1, 55],
          r: [1, undefined$1, 56]
        },
        '26': {
          h: [2, 35],
          ah: [2, 35],
          k: [2, 35],
          l: [2, 35],
          m: [2, 35],
          n: [2, 35],
          o: [2, 35],
          p: [2, 35],
          q: [2, 35],
          r: [2, 35],
          j: [2, 35],
          ae: [2, 35],
          g: [2, 35],
          ag: [2, 35],
          ai: [2, 35],
          s: [1, undefined$1, 57],
          t: [1, undefined$1, 58]
        },
        '27': {
          h: [2, 40],
          ah: [2, 40],
          k: [2, 40],
          l: [2, 40],
          m: [2, 40],
          n: [2, 40],
          o: [2, 40],
          p: [2, 40],
          q: [2, 40],
          r: [2, 40],
          s: [2, 40],
          t: [2, 40],
          j: [2, 40],
          ae: [2, 40],
          g: [2, 40],
          ag: [2, 40],
          ai: [2, 40],
          u: [1, undefined$1, 59],
          v: [1, undefined$1, 60],
          w: [1, undefined$1, 61]
        },
        '28': {
          h: [2, 43],
          ah: [2, 43],
          k: [2, 43],
          l: [2, 43],
          m: [2, 43],
          n: [2, 43],
          o: [2, 43],
          p: [2, 43],
          q: [2, 43],
          r: [2, 43],
          s: [2, 43],
          t: [2, 43],
          u: [2, 43],
          v: [2, 43],
          w: [2, 43],
          j: [2, 43],
          ae: [2, 43],
          g: [2, 43],
          ag: [2, 43],
          ai: [2, 43]
        },
        '29': {
          h: [2, 49],
          ah: [2, 49],
          k: [2, 49],
          l: [2, 49],
          m: [2, 49],
          n: [2, 49],
          o: [2, 49],
          p: [2, 49],
          q: [2, 49],
          r: [2, 49],
          s: [2, 49],
          t: [2, 49],
          u: [2, 49],
          v: [2, 49],
          w: [2, 49],
          j: [2, 49],
          ae: [2, 49],
          g: [2, 49],
          ag: [2, 49],
          ai: [2, 49]
        },
        '30': {
          b: [1, undefined$1, 1],
          c: [1, undefined$1, 2],
          f: [1, undefined$1, 3]
        },
        '31': {
          a: [2, 4],
          e: [2, 4],
          c: [2, 4],
          f: [2, 4],
          b: [2, 4],
          d: [2, 4]
        },
        '32': {
          b: [1, undefined$1, 1],
          c: [1, undefined$1, 2],
          f: [1, undefined$1, 3]
        },
        '33': {
          i: [1, undefined$1, 11],
          j: [1, undefined$1, 64],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7],
          ad: [1, undefined$1, 16],
          af: [1, undefined$1, 17]
        },
        '34': {
          ab: [1, undefined$1, 71]
        },
        '35': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7],
          ad: [1, undefined$1, 16],
          af: [1, undefined$1, 17]
        },
        '36': {
          j: [1, undefined$1, 73]
        },
        '37': {
          h: [2, 48],
          ah: [2, 48],
          k: [2, 48],
          l: [2, 48],
          m: [2, 48],
          n: [2, 48],
          o: [2, 48],
          p: [2, 48],
          q: [2, 48],
          r: [2, 48],
          s: [2, 48],
          t: [2, 48],
          u: [2, 48],
          v: [2, 48],
          w: [2, 48],
          j: [2, 48],
          ae: [2, 48],
          g: [2, 48],
          ag: [2, 48],
          ai: [2, 48]
        },
        '38': {
          h: [2, 47],
          ah: [2, 47],
          k: [2, 47],
          l: [2, 47],
          m: [2, 47],
          n: [2, 47],
          o: [2, 47],
          p: [2, 47],
          q: [2, 47],
          r: [2, 47],
          s: [2, 47],
          t: [2, 47],
          u: [2, 47],
          v: [2, 47],
          w: [2, 47],
          j: [2, 47],
          ae: [2, 47],
          g: [2, 47],
          ag: [2, 47],
          ai: [2, 47]
        },
        '39': {
          h: [2, 17],
          j: [2, 17],
          ae: [2, 17],
          g: [2, 17],
          ai: [2, 17]
        },
        '40': {
          ae: [2, 24],
          g: [2, 24]
        },
        '41': {
          g: [1, undefined$1, 74],
          ae: [1, undefined$1, 75]
        },
        '42': {
          ag: [1, undefined$1, 76]
        },
        '43': {
          ag: [1, undefined$1, 77]
        },
        '44': {
          h: [2, 19],
          j: [2, 19],
          ae: [2, 19],
          g: [2, 19],
          ai: [2, 19]
        },
        '45': {
          g: [1, undefined$1, 78],
          ai: [1, undefined$1, 79]
        },
        '46': {
          ai: [2, 22],
          g: [2, 22]
        },
        '47': {
          a: [2, 6],
          e: [2, 6],
          c: [2, 6],
          f: [2, 6],
          b: [2, 6],
          d: [2, 6]
        },
        '48': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '49': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '50': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '51': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '52': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '53': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '54': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '55': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '56': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '57': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '58': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '59': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '60': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '61': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '62': {
          a: [2, 1],
          d: [2, 1],
          b: [1, undefined$1, 1],
          c: [1, undefined$1, 2],
          f: [1, undefined$1, 3]
        },
        '63': {
          d: [1, undefined$1, 94]
        },
        '64': {
          h: [2, 11],
          i: [2, 11],
          ac: [2, 11],
          ad: [2, 11],
          ah: [2, 11],
          k: [2, 11],
          l: [2, 11],
          m: [2, 11],
          n: [2, 11],
          o: [2, 11],
          p: [2, 11],
          q: [2, 11],
          r: [2, 11],
          s: [2, 11],
          t: [2, 11],
          u: [2, 11],
          v: [2, 11],
          w: [2, 11],
          j: [2, 11],
          ae: [2, 11],
          g: [2, 11],
          aa: [2, 11],
          ag: [2, 11],
          ai: [2, 11]
        },
        '65': {
          g: [2, 52],
          j: [2, 52],
          ah: [2, 52],
          k: [2, 52],
          l: [2, 52],
          m: [2, 52],
          n: [2, 52],
          o: [2, 52],
          p: [2, 52],
          q: [2, 52],
          r: [2, 52],
          s: [2, 52],
          t: [2, 52],
          u: [2, 52],
          v: [2, 52],
          w: [2, 52],
          i: [1, undefined$1, 33],
          aa: [1, undefined$1, 95]
        },
        '66': {
          g: [2, 14],
          j: [2, 14]
        },
        '67': {
          g: [1, undefined$1, 96],
          j: [1, undefined$1, 97]
        },
        '68': {
          g: [1, undefined$1, 98],
          j: [1, undefined$1, 99]
        },
        '69': {
          g: [2, 13],
          j: [2, 13]
        },
        '70': {
          j: [2, 55],
          g: [2, 55]
        },
        '71': {
          i: [2, 59],
          ac: [2, 59],
          ad: [2, 59],
          h: [2, 59],
          ah: [2, 59],
          k: [2, 59],
          l: [2, 59],
          m: [2, 59],
          n: [2, 59],
          o: [2, 59],
          p: [2, 59],
          q: [2, 59],
          r: [2, 59],
          s: [2, 59],
          t: [2, 59],
          u: [2, 59],
          v: [2, 59],
          w: [2, 59],
          j: [2, 59],
          ae: [2, 59],
          g: [2, 59],
          aa: [2, 59],
          ag: [2, 59],
          ai: [2, 59]
        },
        '72': {
          ae: [1, undefined$1, 100]
        },
        '73': {
          h: [2, 53],
          ah: [2, 53],
          k: [2, 53],
          l: [2, 53],
          m: [2, 53],
          n: [2, 53],
          o: [2, 53],
          p: [2, 53],
          q: [2, 53],
          r: [2, 53],
          s: [2, 53],
          t: [2, 53],
          u: [2, 53],
          v: [2, 53],
          w: [2, 53],
          j: [2, 53],
          ae: [2, 53],
          g: [2, 53],
          ag: [2, 53],
          ai: [2, 53]
        },
        '74': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7],
          ad: [1, undefined$1, 16],
          af: [1, undefined$1, 17]
        },
        '75': {
          h: [2, 16],
          j: [2, 16],
          ae: [2, 16],
          g: [2, 16],
          ai: [2, 16]
        },
        '76': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7],
          ad: [1, undefined$1, 16],
          af: [1, undefined$1, 17]
        },
        '77': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7],
          ad: [1, undefined$1, 16],
          af: [1, undefined$1, 17]
        },
        '78': {
          y: [1, undefined$1, 42],
          ab: [1, undefined$1, 43]
        },
        '79': {
          h: [2, 18],
          j: [2, 18],
          ae: [2, 18],
          g: [2, 18],
          ai: [2, 18]
        },
        '80': {
          h: [2, 29],
          ah: [2, 29],
          k: [2, 29],
          j: [2, 29],
          ae: [2, 29],
          g: [2, 29],
          ag: [2, 29],
          ai: [2, 29],
          l: [1, undefined$1, 50]
        },
        '81': {
          k: [1, undefined$1, 48],
          ag: [1, undefined$1, 105]
        },
        '82': {
          h: [2, 31],
          ah: [2, 31],
          k: [2, 31],
          l: [2, 31],
          j: [2, 31],
          ae: [2, 31],
          g: [2, 31],
          ag: [2, 31],
          ai: [2, 31],
          m: [1, undefined$1, 51],
          n: [1, undefined$1, 52]
        },
        '83': {
          h: [2, 33],
          ah: [2, 33],
          k: [2, 33],
          l: [2, 33],
          m: [2, 33],
          n: [2, 33],
          j: [2, 33],
          ae: [2, 33],
          g: [2, 33],
          ag: [2, 33],
          ai: [2, 33],
          o: [1, undefined$1, 53],
          p: [1, undefined$1, 54],
          q: [1, undefined$1, 55],
          r: [1, undefined$1, 56]
        },
        '84': {
          h: [2, 34],
          ah: [2, 34],
          k: [2, 34],
          l: [2, 34],
          m: [2, 34],
          n: [2, 34],
          j: [2, 34],
          ae: [2, 34],
          g: [2, 34],
          ag: [2, 34],
          ai: [2, 34],
          o: [1, undefined$1, 53],
          p: [1, undefined$1, 54],
          q: [1, undefined$1, 55],
          r: [1, undefined$1, 56]
        },
        '85': {
          h: [2, 39],
          ah: [2, 39],
          k: [2, 39],
          l: [2, 39],
          m: [2, 39],
          n: [2, 39],
          o: [2, 39],
          p: [2, 39],
          q: [2, 39],
          r: [2, 39],
          j: [2, 39],
          ae: [2, 39],
          g: [2, 39],
          ag: [2, 39],
          ai: [2, 39],
          s: [1, undefined$1, 57],
          t: [1, undefined$1, 58]
        },
        '86': {
          h: [2, 38],
          ah: [2, 38],
          k: [2, 38],
          l: [2, 38],
          m: [2, 38],
          n: [2, 38],
          o: [2, 38],
          p: [2, 38],
          q: [2, 38],
          r: [2, 38],
          j: [2, 38],
          ae: [2, 38],
          g: [2, 38],
          ag: [2, 38],
          ai: [2, 38],
          s: [1, undefined$1, 57],
          t: [1, undefined$1, 58]
        },
        '87': {
          h: [2, 37],
          ah: [2, 37],
          k: [2, 37],
          l: [2, 37],
          m: [2, 37],
          n: [2, 37],
          o: [2, 37],
          p: [2, 37],
          q: [2, 37],
          r: [2, 37],
          j: [2, 37],
          ae: [2, 37],
          g: [2, 37],
          ag: [2, 37],
          ai: [2, 37],
          s: [1, undefined$1, 57],
          t: [1, undefined$1, 58]
        },
        '88': {
          h: [2, 36],
          ah: [2, 36],
          k: [2, 36],
          l: [2, 36],
          m: [2, 36],
          n: [2, 36],
          o: [2, 36],
          p: [2, 36],
          q: [2, 36],
          r: [2, 36],
          j: [2, 36],
          ae: [2, 36],
          g: [2, 36],
          ag: [2, 36],
          ai: [2, 36],
          s: [1, undefined$1, 57],
          t: [1, undefined$1, 58]
        },
        '89': {
          h: [2, 41],
          ah: [2, 41],
          k: [2, 41],
          l: [2, 41],
          m: [2, 41],
          n: [2, 41],
          o: [2, 41],
          p: [2, 41],
          q: [2, 41],
          r: [2, 41],
          s: [2, 41],
          t: [2, 41],
          j: [2, 41],
          ae: [2, 41],
          g: [2, 41],
          ag: [2, 41],
          ai: [2, 41],
          u: [1, undefined$1, 59],
          v: [1, undefined$1, 60],
          w: [1, undefined$1, 61]
        },
        '90': {
          h: [2, 42],
          ah: [2, 42],
          k: [2, 42],
          l: [2, 42],
          m: [2, 42],
          n: [2, 42],
          o: [2, 42],
          p: [2, 42],
          q: [2, 42],
          r: [2, 42],
          s: [2, 42],
          t: [2, 42],
          j: [2, 42],
          ae: [2, 42],
          g: [2, 42],
          ag: [2, 42],
          ai: [2, 42],
          u: [1, undefined$1, 59],
          v: [1, undefined$1, 60],
          w: [1, undefined$1, 61]
        },
        '91': {
          h: [2, 44],
          ah: [2, 44],
          k: [2, 44],
          l: [2, 44],
          m: [2, 44],
          n: [2, 44],
          o: [2, 44],
          p: [2, 44],
          q: [2, 44],
          r: [2, 44],
          s: [2, 44],
          t: [2, 44],
          u: [2, 44],
          v: [2, 44],
          w: [2, 44],
          j: [2, 44],
          ae: [2, 44],
          g: [2, 44],
          ag: [2, 44],
          ai: [2, 44]
        },
        '92': {
          h: [2, 45],
          ah: [2, 45],
          k: [2, 45],
          l: [2, 45],
          m: [2, 45],
          n: [2, 45],
          o: [2, 45],
          p: [2, 45],
          q: [2, 45],
          r: [2, 45],
          s: [2, 45],
          t: [2, 45],
          u: [2, 45],
          v: [2, 45],
          w: [2, 45],
          j: [2, 45],
          ae: [2, 45],
          g: [2, 45],
          ag: [2, 45],
          ai: [2, 45]
        },
        '93': {
          h: [2, 46],
          ah: [2, 46],
          k: [2, 46],
          l: [2, 46],
          m: [2, 46],
          n: [2, 46],
          o: [2, 46],
          p: [2, 46],
          q: [2, 46],
          r: [2, 46],
          s: [2, 46],
          t: [2, 46],
          u: [2, 46],
          v: [2, 46],
          w: [2, 46],
          j: [2, 46],
          ae: [2, 46],
          g: [2, 46],
          ag: [2, 46],
          ai: [2, 46]
        },
        '94': {
          ab: [1, undefined$1, 7]
        },
        '95': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7],
          ad: [1, undefined$1, 16],
          af: [1, undefined$1, 17]
        },
        '96': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7],
          ad: [1, undefined$1, 16],
          af: [1, undefined$1, 17]
        },
        '97': {
          h: [2, 9],
          i: [2, 9],
          ac: [2, 9],
          ad: [2, 9],
          ah: [2, 9],
          k: [2, 9],
          l: [2, 9],
          m: [2, 9],
          n: [2, 9],
          o: [2, 9],
          p: [2, 9],
          q: [2, 9],
          r: [2, 9],
          s: [2, 9],
          t: [2, 9],
          u: [2, 9],
          v: [2, 9],
          w: [2, 9],
          j: [2, 9],
          ae: [2, 9],
          g: [2, 9],
          aa: [2, 9],
          ag: [2, 9],
          ai: [2, 9]
        },
        '98': {
          ab: [1, undefined$1, 7]
        },
        '99': {
          h: [2, 10],
          i: [2, 10],
          ac: [2, 10],
          ad: [2, 10],
          ah: [2, 10],
          k: [2, 10],
          l: [2, 10],
          m: [2, 10],
          n: [2, 10],
          o: [2, 10],
          p: [2, 10],
          q: [2, 10],
          r: [2, 10],
          s: [2, 10],
          t: [2, 10],
          u: [2, 10],
          v: [2, 10],
          w: [2, 10],
          j: [2, 10],
          ae: [2, 10],
          g: [2, 10],
          aa: [2, 10],
          ag: [2, 10],
          ai: [2, 10]
        },
        '100': {
          i: [2, 60],
          ac: [2, 60],
          ad: [2, 60],
          h: [2, 60],
          ah: [2, 60],
          k: [2, 60],
          l: [2, 60],
          m: [2, 60],
          n: [2, 60],
          o: [2, 60],
          p: [2, 60],
          q: [2, 60],
          r: [2, 60],
          s: [2, 60],
          t: [2, 60],
          u: [2, 60],
          v: [2, 60],
          w: [2, 60],
          j: [2, 60],
          ae: [2, 60],
          g: [2, 60],
          aa: [2, 60],
          ag: [2, 60],
          ai: [2, 60]
        },
        '101': {
          ae: [2, 25],
          g: [2, 25]
        },
        '102': {
          ai: [2, 20],
          g: [2, 20]
        },
        '103': {
          ai: [2, 21],
          g: [2, 21]
        },
        '104': {
          ai: [2, 23],
          g: [2, 23]
        },
        '105': {
          i: [1, undefined$1, 11],
          t: [1, undefined$1, 12],
          x: [1, undefined$1, 13],
          y: [1, undefined$1, 14],
          z: [1, undefined$1, 15],
          ab: [1, undefined$1, 7]
        },
        '106': {
          h: [1, undefined$1, 113],
          i: [1, undefined$1, 33]
        },
        '107': {
          j: [2, 56],
          g: [2, 56]
        },
        '108': {
          g: [1, undefined$1, 98],
          j: [1, undefined$1, 114]
        },
        '109': {
          g: [2, 12],
          j: [2, 12]
        },
        '110': {
          i: [1, undefined$1, 33],
          aa: [1, undefined$1, 95]
        },
        '111': {
          j: [2, 54],
          g: [2, 54]
        },
        '112': {
          h: [2, 27],
          j: [2, 27],
          ae: [2, 27],
          g: [2, 27],
          ai: [2, 27]
        },
        '113': {
          a: [2, 5],
          e: [2, 5],
          c: [2, 5],
          f: [2, 5],
          b: [2, 5],
          d: [2, 5]
        },
        '114': {
          h: [2, 8],
          i: [2, 8],
          ac: [2, 8],
          ad: [2, 8],
          ah: [2, 8],
          k: [2, 8],
          l: [2, 8],
          m: [2, 8],
          n: [2, 8],
          o: [2, 8],
          p: [2, 8],
          q: [2, 8],
          r: [2, 8],
          s: [2, 8],
          t: [2, 8],
          u: [2, 8],
          v: [2, 8],
          w: [2, 8],
          j: [2, 8],
          ae: [2, 8],
          g: [2, 8],
          aa: [2, 8],
          ag: [2, 8],
          ai: [2, 8]
        }
      }
    };

    parser.parse = function parse(input, filename) {
      var state, symbol, ret, action, $$;
      var self = this;
      var lexer = self.lexer;
      var table = self.table;
      var gotos = table.gotos;
      var tableAction = table.action;
      var productions = self.productions; // for debug info
      // for debug info

      var prefix = filename ? 'in file: ' + filename + ' ' : '';
      var valueStack = [];
      var stateStack = [0];
      lexer.resetInput(input);

      while (1) {
        // retrieve state number from top of stack
        state = peekStack(stateStack);

        if (!symbol) {
          symbol = lexer.lex();
        }

        if (symbol) {
          // read action for current state and first input
          action = tableAction[state] && tableAction[state][symbol];
        } else {
          action = null;
        }

        if (!action) {
          var expected = [];
          var error; //#JSCOVERAGE_IF
          //#JSCOVERAGE_IF

          if (tableAction[state]) {
            each(tableAction[state], function (v, symbolForState) {
              action = v[GrammarConst.TYPE_INDEX];
              var map = [];
              map[GrammarConst.SHIFT_TYPE] = 'shift';
              map[GrammarConst.REDUCE_TYPE] = 'reduce';
              map[GrammarConst.ACCEPT_TYPE] = 'accept';
              expected.push(map[action] + ':' + self.lexer.mapReverseSymbol(symbolForState));
            });
          }

          error = prefix + 'syntax error at line ' + lexer.lineNumber + ':\n' + lexer.showDebugInfo() + '\n' + 'expect ' + expected.join(', ');
          throw new Error(error);
        }

        switch (action[GrammarConst.TYPE_INDEX]) {
          case GrammarConst.SHIFT_TYPE:
            valueStack.push(lexer.text); // push state
            // push state

            stateStack.push(action[GrammarConst.TO_INDEX]); // allow to read more
            // allow to read more

            symbol = null;
            break;

          case GrammarConst.REDUCE_TYPE:
            var production = productions[action[GrammarConst.PRODUCTION_INDEX]];
            var reducedSymbol = production.symbol || production[0];
            var reducedAction = production.action || production[2];
            var reducedRhs = production.rhs || production[1];
            var len = reducedRhs.length;
            $$ = peekStack(valueStack, len); // default to $$ = $1
            // default to $$ = $1

            ret = undefined$1;
            self.$$ = $$;

            for (var i = 0; i < len; i++) {
              self['$' + (len - i)] = peekStack(valueStack, i + 1);
            }

            if (reducedAction) {
              ret = reducedAction.call(self);
            }

            if (ret !== undefined$1) {
              $$ = ret;
            } else {
              $$ = self.$$;
            }

            var reverseIndex = len * -1;
            stateStack.splice(reverseIndex, len);
            valueStack.splice(reverseIndex, len);
            valueStack.push($$);
            var newState = gotos[peekStack(stateStack)][reducedSymbol];
            stateStack.push(newState);
            break;

          case GrammarConst.ACCEPT_TYPE:
            return $$;
        }
      }
    };

    return parser;
  }();

  /**
   * Ast node class for xtemplate
   */
  var ast = {};

  function sameArray(a1, a2) {
    var l1 = a1.length;
    var l2 = a2.length;

    if (l1 !== l2) {
      return 0;
    }

    for (var i = 0; i < l1; i++) {
      if (a1[i] !== a2[i]) {
        return 0;
      }
    }

    return 1;
  }

  ast.ProgramNode = function ProgramNode(pos, statements, inverse) {
    var self = this;
    self.pos = pos;
    self.statements = statements;
    self.inverse = inverse;
  };

  ast.ProgramNode.prototype.type = 'program';

  ast.BlockStatement = function BlockStatement(pos, func, program, close, escape) {
    var closeParts = close.parts;
    var self = this;
    var e; // no close tag

    if (!sameArray(func.id.parts, closeParts)) {
      e = "in file: " + pos.filename + " syntax error at line " + (pos.line + ", col " + pos.col + ":\n") + ("expect {{/" + func.id.parts + "}} not {{/" + closeParts + "}}");
      throw new Error(e);
    }

    self.escape = escape;
    self.pos = pos;
    self.func = func;
    self.program = program;
  };

  ast.BlockStatement.prototype.type = 'blockStatement';

  ast.ExpressionStatement = function ExpressionStatement(pos, expression, escape) {
    var self = this;
    self.pos = pos;
    self.value = expression;
    self.escape = escape;
  };

  ast.ExpressionStatement.prototype.type = 'expressionStatement';

  ast.ContentStatement = function ContentStatement(pos, value) {
    var self = this;
    self.pos = pos;
    self.value = value || '';
  };

  ast.ContentStatement.prototype.type = 'contentStatement';

  ast.UnaryExpression = function UnaryExpression(unaryType, v) {
    this.value = v;
    this.unaryType = unaryType;
  };

  ast.Function = function Function(pos, id, params, hash) {
    var self = this;
    self.pos = pos;
    self.id = id;
    self.params = params;
    self.hash = hash;
  };

  ast.Function.prototype.type = 'function';
  ast.UnaryExpression.prototype.type = 'unaryExpression';

  ast.MultiplicativeExpression = function MultiplicativeExpression(op1, opType, op2) {
    var self = this;
    self.op1 = op1;
    self.opType = opType;
    self.op2 = op2;
  };

  ast.MultiplicativeExpression.prototype.type = 'multiplicativeExpression';

  ast.AdditiveExpression = function AdditiveExpression(op1, opType, op2) {
    var self = this;
    self.op1 = op1;
    self.opType = opType;
    self.op2 = op2;
  };

  ast.AdditiveExpression.prototype.type = 'additiveExpression';

  ast.RelationalExpression = function RelationalExpression(op1, opType, op2) {
    var self = this;
    self.op1 = op1;
    self.opType = opType;
    self.op2 = op2;
  };

  ast.RelationalExpression.prototype.type = 'relationalExpression';

  ast.EqualityExpression = function EqualityExpression(op1, opType, op2) {
    var self = this;
    self.op1 = op1;
    self.opType = opType;
    self.op2 = op2;
  };

  ast.EqualityExpression.prototype.type = 'equalityExpression';

  ast.ConditionalAndExpression = function ConditionalAndExpression(op1, op2) {
    var self = this;
    self.op1 = op1;
    self.op2 = op2;
    self.opType = '&&';
  };

  ast.ConditionalAndExpression.prototype.type = 'conditionalAndExpression';

  ast.ConditionalOrExpression = function ConditionalOrExpression(op1, op2) {
    var self = this;
    self.op1 = op1;
    self.op2 = op2;
    self.opType = '||';
  };

  ast.ConditionalOrExpression.prototype.type = 'conditionalOrExpression';

  ast.ConditionalExpression = function ConditionalExpression(op1, op2, op3) {
    var self = this;
    self.op1 = op1;
    self.op2 = op2;
    self.op3 = op3;
    self.opType = '?:';
  };

  ast.ConditionalExpression.prototype.type = 'conditionalExpression';

  ast.String = function StringType(pos, value) {
    var self = this;
    self.pos = pos;
    self.value = value;
  };

  ast.String.prototype.type = 'string';

  ast.Number = function NumberType(pos, value) {
    var self = this;
    self.pos = pos;
    self.value = value;
  };

  ast.Number.prototype.type = 'number';

  ast.Hash = function Hash(pos, value) {
    var self = this;
    self.pos = pos;
    self.value = value;
  };

  ast.Hash.prototype.type = 'hash';

  ast.ArrayExpression = function ArrayExpression(list) {
    this.list = list;
  };

  ast.ArrayExpression.prototype.type = 'arrayExpression';

  ast.ObjectExpression = function ObjectExpression(obj) {
    this.obj = obj;
  };

  ast.ObjectExpression.prototype.type = 'objectExpression';

  ast.Id = function Id(pos, raw) {
    var self = this;
    var parts = [];
    var depth = 0;
    self.pos = pos;

    for (var i = 0, l = raw.length; i < l; i++) {
      var p = raw[i];

      if (p === '..') {
        depth++;
      } else {
        parts.push(p);
      }
    }

    self.parts = parts;
    self.string = parts.join('.');
    self.depth = depth;
  };

  ast.Id.prototype.type = 'id';

  /**
   * compiler tools
   */
  var doubleReg = /\\*"/g;
  var singleReg = /\\*'/g;
  var arrayPush = [].push;
  var globals = {};

  (function () {
    var globalKeys = ['undefined', 'null', 'true', 'false'];

    for (var i = 0; i < globalKeys.length; i++) {
      globals[globalKeys[i]] = 1;
    }
  })();

  function genStackJudge(parts, data, count, lastVariable_) {
    if (count === void 0) {
      count = 0;
    }

    if (!parts.length) {
      return data;
    }

    var lastVariable = lastVariable_ || data;
    var part0 = parts[0];
    var variable = "t" + count;
    return ["(" + data + " != null ? ", genStackJudge(parts.slice(1), "(" + variable + " = " + (lastVariable + part0) + ")", count + 1, variable), ' : ', lastVariable, ')'].join('');
  }

  function accessVariable(loose, parts, topVariable, fullVariable) {
    return loose ? genStackJudge(parts.slice(1), topVariable) : fullVariable;
  }

  var tools = {
    genStackJudge: genStackJudge,
    isGlobalId: function isGlobalId(node) {
      if (globals[node.string]) {
        return 1;
      }

      return 0;
    },
    chainedVariableRead: function chainedVariableRead(self, source, idParts, root, resolveUp, loose) {
      var strs = tools.convertIdPartsToRawAccessor(self, source, idParts);
      var parts = strs.parts;
      var part0 = parts[0];
      var scope = '';

      if (root) {
        scope = 'scope.root.';
      }

      var affix = scope + "affix";
      var data = scope + "data";
      var ret = ['(', "(t=(" + (affix + part0) + ")) !== undefined ? ", idParts.length > 1 ? accessVariable(loose, parts, 't', affix + strs.str) : 't', ' : '];

      if (resolveUp) {
        ret = ret.concat(['(', "(t = " + (data + part0) + ") !== undefined ? ", idParts.length > 1 ? accessVariable(loose, parts, 't', data + strs.str) : 't', '  : ', loose ? "scope.resolveLooseUp(" + strs.arr + ")" : "scope.resolveUp(" + strs.arr + ")", ')']);
      } else {
        ret.push(accessVariable(loose, parts, data + part0, data + strs.str));
      }

      ret.push(')');
      return ret.join('');
    },
    convertIdPartsToRawAccessor: function convertIdPartsToRawAccessor(self, source, idParts) {
      var i;
      var l;
      var idPart;
      var idPartType;
      var nextIdNameCode;
      var parts = [];
      var ret = [];
      var funcRet = '';

      for (i = 0, l = idParts.length; i < l; i++) {
        idPart = idParts[i];
        idPartType = idPart.type;

        if (idPartType) {
          nextIdNameCode = self[idPartType](idPart);
          tools.pushToArray(source, nextIdNameCode.source);

          if (idPartType === 'function') {
            funcRet = 1;
          }

          ret.push("[ " + nextIdNameCode.exp + " ]");
          parts.push(nextIdNameCode.exp);
        } else {
          // literal a.x
          ret.push("." + idPart);
          parts.push(tools.wrapByDoubleQuote(idPart));
        }
      } // y().z() =>
      // var a = y();
      // a['z']


      return {
        str: ret.join(''),
        arr: "[" + parts.join(',') + "]",
        parts: ret,
        funcRet: funcRet,
        resolvedParts: parts
      };
    },
    wrapByDoubleQuote: function wrapByDoubleQuote(str) {
      return "\"" + str + "\"";
    },
    wrapBySingleQuote: function wrapBySingleQuote(str) {
      return "'" + str + "'";
    },
    joinArrayOfString: function joinArrayOfString(arr) {
      return tools.wrapByDoubleQuote(arr.join('","'));
    },
    escapeSingleQuoteInCodeString: function escapeSingleQuoteInCodeString(str, isDouble) {
      return str.replace(isDouble ? doubleReg : singleReg, function (m_) {
        var m = m_; // \ 's number ，用户显式转过 "\'" , "\\\'" 就不处理了，否则手动对 ` 加 \ 转义

        if (m.length % 2) {
          m = "\\" + m;
        }

        return m;
      });
    },
    escapeString: function escapeString(str_, isCode) {
      var str = str_;

      if (isCode) {
        str = tools.escapeSingleQuoteInCodeString(str, 0);
      } else {
        str = str.replace(/\\/g, '\\\\').replace(/'/g, "\\'");
      }

      str = str.replace(/\r/g, '\\r').replace(/\n/g, '\\n').replace(/\t/g, '\\t');
      return str;
    },
    pushToArray: function pushToArray(to, from) {
      if (from) {
        arrayPush.apply(to, from);
      }
    }
  };

  var nativeCommands = {
    range: 1,
    "void": 1,
    foreach: 1,
    forin: 1,
    each: 1,
    "with": 1,
    "if": 1,
    set: 1,
    include: 1,
    includeOnce: 1,
    parse: 1,
    extend: 1,
    block: 1,
    macro: 1,
    "debugger": 1
  };

  var nativeUtils = {
    callFn: 1,
    callDataFn: 1,
    callCommand: 1
  };

  /**
   * translate ast to js function code
   */
  parser.yy = ast;
  var pushToArray = tools.pushToArray,
      wrapByDoubleQuote = tools.wrapByDoubleQuote,
      convertIdPartsToRawAccessor = tools.convertIdPartsToRawAccessor,
      wrapBySingleQuote = tools.wrapBySingleQuote,
      escapeString = tools.escapeString,
      chainedVariableRead = tools.chainedVariableRead; // codeTemplates --------------------------- start

  var TMP_DECLARATION = ['var t;'];

  for (var i = 0; i < 10; i++) {
    TMP_DECLARATION.push("var t" + i + ";");
  }

  var TOP_DECLARATION = TMP_DECLARATION.concat(["var tpl = this;\n  var root = tpl.root;\n  var buffer = tpl.buffer;\n  var scope = tpl.scope;\n  var runtime = tpl.runtime;\n  var name = tpl.name;\n  var pos = tpl.pos;\n  var data = scope.data;\n  var affix = scope.affix;\n  var nativeCommands = root.nativeCommands;\n  var utils = root.utils;"]).join('\n');

  var CALL_NATIVE_COMMAND = function CALL_NATIVE_COMMAND(_ref) {
    var lhs = _ref.lhs,
        name = _ref.name,
        option = _ref.option;
    return lhs + " = " + name + "Command.call(tpl, scope, " + option + ", buffer);";
  };

  var CALL_CUSTOM_COMMAND = function CALL_CUSTOM_COMMAND(_ref2) {
    var option = _ref2.option,
        idParts = _ref2.idParts;
    return "buffer = callCommandUtil(tpl, scope, " + option + ", buffer, " + idParts + ");";
  };

  var CALL_FUNCTION = function CALL_FUNCTION(_ref3) {
    var lhs = _ref3.lhs,
        option = _ref3.option,
        idParts = _ref3.idParts;
    return lhs + " = callFnUtil(tpl, scope, " + option + ", buffer, " + idParts + ");";
  };

  var CALL_DATA_FUNCTION = function CALL_DATA_FUNCTION(_ref4) {
    var lhs = _ref4.lhs,
        idParts = _ref4.idParts,
        params = _ref4.params;
    return lhs + " = callDataFnUtil([" + params + "], " + idParts + ");";
  };

  var CALL_FUNCTION_DEPTH = function CALL_FUNCTION_DEPTH(_ref5) {
    var lhs = _ref5.lhs,
        option = _ref5.option,
        idParts = _ref5.idParts,
        depth = _ref5.depth;
    return lhs + " = callFnUtil(tpl, scope, " + option + ", buffer, " + idParts + ", " + depth + ");";
  };

  var ASSIGN_STATEMENT = function ASSIGN_STATEMENT(_ref6) {
    var lhs = _ref6.lhs,
        value = _ref6.value;
    return "var " + lhs + " = " + value + ";";
  };

  var SCOPE_RESOLVE_DEPTH = function SCOPE_RESOLVE_DEPTH(_ref7) {
    var lhs = _ref7.lhs,
        idParts = _ref7.idParts,
        depth = _ref7.depth;
    return "var " + lhs + " = scope.resolve(" + idParts + "," + depth + ");";
  };

  var SCOPE_RESOLVE_LOOSE_DEPTH = function SCOPE_RESOLVE_LOOSE_DEPTH(_ref8) {
    var lhs = _ref8.lhs,
        idParts = _ref8.idParts,
        depth = _ref8.depth;
    return "var " + lhs + " = scope.resolveLoose(" + idParts + "," + depth + ");";
  };

  var FUNC = function FUNC(_ref9) {
    var functionName = _ref9.functionName,
        params = _ref9.params,
        body = _ref9.body;
    return "function " + functionName + "(" + params + "){\n  " + body + "\n}";
  };

  var SOURCE_URL = function SOURCE_URL(_ref10) {
    var name = _ref10.name;
    return "\n  //# sourceURL = " + name + ".js\n";
  };

  var DECLARE_NATIVE_COMMANDS = function DECLARE_NATIVE_COMMANDS(name) {
    return "var " + name + "Command = nativeCommands[\"" + name + "\"];";
  };

  var DECLARE_UTILS = function DECLARE_UTILS(name) {
    return "var " + name + "Util = utils[\"" + name + "\"];";
  };

  var BUFFER_WRITE = function BUFFER_WRITE(_ref11) {
    var value = _ref11.value;
    return "buffer = buffer.write(" + value + ");";
  };

  var BUFFER_APPEND = function BUFFER_APPEND(_ref12) {
    var value = _ref12.value;
    return "buffer.data += " + value + ";";
  };

  var BUFFER_WRITE_ESCAPED = function BUFFER_WRITE_ESCAPED(_ref13) {
    var value = _ref13.value;
    return "buffer = buffer.writeEscaped(" + value + ");";
  };

  var RETURN_BUFFER = 'return buffer;'; // codeTemplates ---------------------------- end

  var nativeCode = [];
  each(nativeUtils, function (_, name) {
    nativeCode.push(DECLARE_UTILS(name));
  });
  each(nativeCommands, function (_, name) {
    nativeCode.push(DECLARE_NATIVE_COMMANDS(name));
  });
  nativeCode = nativeCode.join('\n');
  var lastLine = 1;

  function each(object, fn, context) {
    if (context === void 0) {
      context = null;
    }

    if (object) {
      var key;
      var val;
      var keys;
      var _i = 0;
      var length = object && object.length; // do not use typeof obj == 'function': bug in phantomjs

      var isObj = length === undefined || Object.prototype.toString.call(object) === '[object Function]';

      if (isObj) {
        keys = Object.keys(object);

        for (; _i < keys.length; _i++) {
          key = keys[_i]; // can not use hasOwnProperty

          if (fn.call(context, object[key], key, object) === false) {
            break;
          }
        }
      } else {
        for (val = object[0]; _i < length; val = object[++_i]) {
          if (fn.call(context, val, _i, object) === false) {
            break;
          }
        }
      }
    }

    return object;
  }

  function markLine(pos, source) {
    if (lastLine === pos.line) {
      return;
    }

    lastLine = pos.line;
    source.push("pos.line = " + pos.line + ";");
  }

  function resetGlobal() {
    lastLine = 1;
  }

  function getFunctionDeclare(functionName) {
    return ["function " + functionName + "(scope, buffer, undefined) {\n    var data = scope.data;\n    var affix = scope.affix;"];
  }

  function guid(self, str) {
    return str + self.uuid++;
  }

  function considerSuffix(n, withSuffix) {
    var name = n;

    if (withSuffix && !/\.xtpl$/.test(name)) {
      name += '.xtpl';
    }

    return name;
  }

  function opExpression(e) {
    var source = [];
    var type = e.opType;
    var exp1;
    var exp2;
    var exp3;
    var code1Source;
    var code2Source;
    var code3Source;
    var code3;
    var code1 = this[e.op1.type](e.op1);
    var code2 = this[e.op2.type](e.op2);
    var exp = guid(this, 'exp');
    exp1 = code1.exp;
    exp2 = code2.exp;
    code1Source = code1.source;
    code2Source = code2.source;

    if (e.op3) {
      code3 = this[e.op3.type](e.op3);
      exp3 = code3.exp;
      code3Source = code3.source;
    }

    pushToArray(source, code1Source);
    source.push("var " + exp + " = " + exp1 + ";");

    if (type === '&&' || type === '||') {
      source.push("if(" + (type === '&&' ? '' : '!') + "(" + exp + ")){");
      pushToArray(source, code2Source);
      source.push(exp + " = " + exp2 + ";");
      source.push('}');
    } else if (type === '?:') {
      pushToArray(source, code2Source);
      pushToArray(source, code3Source);
      source.push(exp + " = (" + exp1 + ") ? (" + exp2 + ") : (" + exp3 + ");");
    } else {
      pushToArray(source, code2Source);
      source.push(exp + " = (" + exp1 + ") " + type + " (" + exp2 + ");");
    }

    return {
      exp: exp,
      source: source
    };
  }

  function genFunction(self, statements) {
    var functionName = guid(self, 'func');
    var source = getFunctionDeclare(functionName);
    var statement;

    for (var _i2 = 0, len = statements.length; _i2 < len; _i2++) {
      statement = statements[_i2];
      pushToArray(source, self[statement.type](statement).source);
    }

    source.push(RETURN_BUFFER);
    source.push('}'); // avoid deep closure for performance

    pushToArray(self.functionDeclares, source);
    return functionName;
  }

  function genConditionFunction(self, condition) {
    var functionName = guid(self, 'func');
    var source = getFunctionDeclare(functionName);
    var gen = self[condition.type](condition);
    pushToArray(source, gen.source);
    source.push("return " + gen.exp + ";");
    source.push('}');
    pushToArray(self.functionDeclares, source);
    return functionName;
  }

  function genTopFunction(self, statements) {
    var catchError = self.config.catchError;
    var source = [// 'function run(tpl) {',
    TOP_DECLARATION, nativeCode, // decrease speed by 10%
    // for performance
    catchError ? 'try {' : ''];
    var statement;
    var i;
    var len;

    for (i = 0, len = statements.length; i < len; i++) {
      statement = statements[i];
      pushToArray(source, self[statement.type](statement, {
        top: 1
      }).source);
    }

    source.splice.apply(source, [2, 0].concat(self.functionDeclares).concat(''));
    source.push(RETURN_BUFFER); // source.push('}');
    // source.push('function tryRun(tpl) {');
    // source.push('try {');
    // source.push('ret = run(this);');

    if (catchError) {
      source.push.apply(source, ['} catch(e) {', 'if(!e.xtpl){', 'buffer.error(e);', '}else{ throw e; }', '}']);
    } //    source.push('}');
    //    source.push('return tryRun(this);');


    var imports = [];

    for (i = source.length - 1; i > 0; i--) {
      var c = source[i];

      if (c.startsWith('import ')) {
        imports.push(c);
        source.splice(i, 1);
      }
    }

    return {
      imports: imports,
      params: ['undefined'],
      source: source.join('\n')
    };
  }

  function genOptionFromFunction(self, func, escape, fn, elseIfs, inverse) {
    var source = [];
    var params = func.params;
    var hash = func.hash;
    var funcParams = [];
    var isSetFunction = func.id.string === 'set';

    if (params) {
      each(params, function (param) {
        var nextIdNameCode = self[param.type](param);
        pushToArray(source, nextIdNameCode.source);
        funcParams.push(nextIdNameCode.exp);
      });
    }

    var funcHash = [];

    if (hash) {
      each(hash.value, function (h) {
        var v = h[1];
        var key = h[0];
        var vCode = self[v.type](v);
        pushToArray(source, vCode.source);

        if (isSetFunction) {
          // support  {{set(x.y.z=1)}}
          // https://github.com/xtemplate/xtemplate/issues/54
          var resolvedParts = convertIdPartsToRawAccessor(self, source, key.parts).resolvedParts;
          funcHash.push({
            key: resolvedParts,
            depth: key.depth,
            value: vCode.exp
          });
        } else {
          if (key.parts.length !== 1 || typeof key.parts[0] !== 'string') {
            throw new Error('invalid hash parameter');
          }

          funcHash.push([wrapByDoubleQuote(key.string), vCode.exp]);
        }
      });
    }

    var exp = ''; // literal init array, do not use arr.push for performance

    if (funcParams.length || funcHash.length || escape || fn || inverse || elseIfs) {
      if (escape) {
        exp += ', escape: 1';
      }

      if (funcParams.length) {
        exp += ", params: [ " + funcParams.join(',') + " ]";
      }

      if (funcHash.length) {
        var hashStr = [];

        if (isSetFunction) {
          each(funcHash, function (h) {
            hashStr.push("{ key: [" + h.key.join(',') + "], value: " + h.value + ", depth: " + h.depth + " }");
          });
          exp += ",hash: [ " + hashStr.join(',') + " ]";
        } else {
          each(funcHash, function (h) {
            hashStr.push(h[0] + ":" + h[1]);
          });
          exp += ",hash: { " + hashStr.join(',') + " }";
        }
      }

      if (fn) {
        exp += ",fn: " + fn;
      }

      if (inverse) {
        exp += ",inverse: " + inverse;
      }

      if (elseIfs) {
        exp += ",elseIfs: " + elseIfs;
      }

      exp = "{ " + exp.slice(1) + " }";
    }

    return {
      exp: exp || '{}',
      funcParams: funcParams,
      source: source
    };
  }

  function generateFunction(self, func, block, escape_) {
    var escape = escape_;
    var esmodule = self.config.esmodule;
    var source = [];
    markLine(func.pos, source);
    var functionConfigCode;
    var idName;
    var id = func.id;
    var idString = id.string;

    if (idString in nativeCommands) {
      escape = 0;
    }

    var idParts = id.parts;
    var i;

    if (idString === 'elseif') {
      return {
        exp: '',
        source: []
      };
    }

    if (block) {
      var programNode = block.program;
      var inverse = programNode.inverse;
      var fnName;
      var elseIfsName;
      var inverseName;
      var elseIfs = [];
      var elseIf;
      var functionValue;
      var statement;
      var statements = programNode.statements;
      var thenStatements = [];

      for (i = 0; i < statements.length; i++) {
        statement = statements[i];
        /* eslint no-cond-assign:0 */

        if (statement.type === 'expressionStatement' && (functionValue = statement.value) && (functionValue = functionValue.parts) && functionValue.length === 1 && (functionValue = functionValue[0]) && functionValue.type === 'function' && functionValue.id.string === 'elseif') {
          if (elseIf) {
            elseIfs.push(elseIf);
          }

          elseIf = {
            condition: functionValue.params[0],
            statements: []
          };
        } else if (elseIf) {
          elseIf.statements.push(statement);
        } else {
          thenStatements.push(statement);
        }
      }

      if (elseIf) {
        elseIfs.push(elseIf);
      } // find elseIfs


      fnName = genFunction(self, thenStatements);

      if (inverse) {
        inverseName = genFunction(self, inverse);
      }

      if (elseIfs.length) {
        var elseIfsVariable = [];

        for (i = 0; i < elseIfs.length; i++) {
          var elseIfStatement = elseIfs[i];
          var conditionName = genConditionFunction(self, elseIfStatement.condition);
          elseIfsVariable.push("{\n        test: " + conditionName + ",\n        fn: " + genFunction(self, elseIfStatement.statements) + "\n        }");
        }

        elseIfsName = "[ " + elseIfsVariable.join(',') + " ]";
      }

      functionConfigCode = genOptionFromFunction(self, func, escape, fnName, elseIfsName, inverseName);
      pushToArray(source, functionConfigCode.source);
    }

    var _self$config = self.config,
        isModule = _self$config.isModule,
        withSuffix = _self$config.withSuffix;

    if (idString === 'include' || idString === 'parse' || idString === 'extend') {
      if (!func.params || func.params.length > 2) {
        throw new Error('include/parse/extend can only has at most two parameter!');
      }
    }

    if (isModule) {
      if (idString === 'include' || idString === 'parse') {
        var name = considerSuffix(func.params[0].value, withSuffix);
        var moduleName;

        if (esmodule) {
          moduleName = 'esDep' + ++self.uuid;
          source.push("import " + moduleName + " from \"" + name + "\";");
        } else {
          moduleName = 'require' + "(\"" + name + "\")";
        }

        func.params[0] = {
          type: 'raw',
          value: moduleName
        };
      }
    }

    if (!functionConfigCode) {
      functionConfigCode = genOptionFromFunction(self, func, escape, null, null, null);
      pushToArray(source, functionConfigCode.source);
    }

    if (!block) {
      idName = guid(self, 'callRet');
      source.push("var " + idName);
    }

    if (idString in nativeCommands) {
      if (idString === 'extend') {
        source.push("runtime.extendTpl = " + functionConfigCode.exp);
        source.push("buffer = buffer.async(\n      function(newBuffer){runtime.extendTplBuffer = newBuffer;}\n      );");

        if (isModule) {
          var _name = considerSuffix(func.params[0].value, withSuffix);

          var _moduleName;

          if (esmodule) {
            _moduleName = 'esDep' + ++self.uuid;
            source.push("import " + _moduleName + " from \"" + _name + "\";");
          } else {
            _moduleName = 'require' + "(\"" + _name + "\")";
          }

          source.push("runtime.extendTplFn = " + _moduleName + ";");
        }
      } else if (idString === 'include') {
        source.push("buffer = root." + (isModule ? 'includeModule' : 'include') + "(scope, " + functionConfigCode.exp + ", buffer,tpl);");
      } else if (idString === 'includeOnce') {
        source.push("buffer = root." + (isModule ? 'includeOnceModule' : 'includeOnce') + "(scope, " + functionConfigCode.exp + ", buffer,tpl);");
      } else if (idString === 'parse') {
        source.push("buffer = root." + (isModule ? 'includeModule' : 'include') + "(new scope.constructor(), " + functionConfigCode.exp + ", buffer, tpl);");
      } else {
        source.push(CALL_NATIVE_COMMAND({
          lhs: block ? 'buffer' : idName,
          name: idString,
          option: functionConfigCode.exp
        }));
      }
    } else if (block) {
      source.push(CALL_CUSTOM_COMMAND({
        option: functionConfigCode.exp,
        idParts: convertIdPartsToRawAccessor(self, source, idParts).arr
      }));
    } else {
      var resolveParts = convertIdPartsToRawAccessor(self, source, idParts); // {{x.y().q.z()}}
      // do not need scope resolution, call data function directly

      if (resolveParts.funcRet) {
        source.push(CALL_DATA_FUNCTION({
          lhs: idName,
          params: functionConfigCode.funcParams.join(','),
          idParts: resolveParts.arr,
          depth: id.depth
        }));
      } else {
        source.push((id.depth ? CALL_FUNCTION_DEPTH : CALL_FUNCTION)({
          lhs: idName,
          option: functionConfigCode.exp,
          idParts: resolveParts.arr,
          depth: id.depth
        }));
      }
    }

    return {
      exp: idName,
      source: source
    };
  }

  function AstToJSProcessor(config) {
    this.functionDeclares = [];
    this.config = config || {};
    this.uuid = 0;
  }

  AstToJSProcessor.prototype = {
    constructor: AstToJSProcessor,
    raw: function raw(_raw) {
      return {
        exp: _raw.value
      };
    },
    arrayExpression: function arrayExpression(e) {
      var list = e.list;
      var len = list.length;
      var r;
      var source = [];
      var exp = [];

      for (var _i3 = 0; _i3 < len; _i3++) {
        r = this[list[_i3].type](list[_i3]);
        pushToArray(source, r.source);
        exp.push(r.exp);
      }

      return {
        exp: "[ " + exp.join(',') + " ]",
        source: source
      };
    },
    objectExpression: function objectExpression(e) {
      var obj = e.obj;
      var len = obj.length;
      var r;
      var source = [];
      var exp = [];

      for (var _i4 = 0; _i4 < len; _i4++) {
        var item = obj[_i4];
        r = this[item[1].type](item[1]);
        pushToArray(source, r.source);
        exp.push(wrapByDoubleQuote(item[0]) + ": " + r.exp);
      }

      return {
        exp: "{ " + exp.join(',') + " }",
        source: source
      };
    },
    conditionalExpression: opExpression,
    conditionalOrExpression: opExpression,
    conditionalAndExpression: opExpression,
    relationalExpression: opExpression,
    equalityExpression: opExpression,
    additiveExpression: opExpression,
    multiplicativeExpression: opExpression,
    unaryExpression: function unaryExpression(e) {
      var code = this[e.value.type](e.value);
      return {
        exp: e.unaryType + "(" + code.exp + ")",
        source: code.source
      };
    },
    string: function string(e) {
      // same as contentNode.value
      return {
        exp: wrapBySingleQuote(escapeString(e.value, 1)),
        source: []
      };
    },
    number: function number(e) {
      return {
        exp: e.value,
        source: []
      };
    },
    id: function id(idNode) {
      var source = [];
      var self = this;
      var loose = !self.config.strict;
      markLine(idNode.pos, source);

      if (tools.isGlobalId(idNode)) {
        return {
          exp: idNode.string,
          source: source
        };
      }

      var depth = idNode.depth;
      var idParts = idNode.parts;
      var idName = guid(self, 'id');

      if (depth) {
        source.push((loose ? SCOPE_RESOLVE_LOOSE_DEPTH : SCOPE_RESOLVE_DEPTH)({
          lhs: idName,
          idParts: convertIdPartsToRawAccessor(self, source, idParts).arr,
          depth: depth
        }));
        return {
          exp: idName,
          source: source
        };
      }

      var part0 = idParts[0];
      var remain;
      var remainParts;

      if (part0 === 'this') {
        remainParts = idParts.slice(1);
        source.push(ASSIGN_STATEMENT({
          lhs: idName,
          value: remainParts.length ? chainedVariableRead(self, source, remainParts, undefined, undefined, loose) : 'data'
        }));
        return {
          exp: idName,
          source: source
        };
      } else if (part0 === 'root') {
        remainParts = idParts.slice(1);
        remain = remainParts.join('.');

        if (remain) {
          remain = "." + remain;
        }

        source.push(ASSIGN_STATEMENT({
          lhs: idName,
          value: remain ? chainedVariableRead(self, source, remainParts, true, undefined, loose) : 'scope.root.data',
          idParts: remain
        }));
        return {
          exp: idName,
          source: source
        };
      } // {{x.y().z}}


      if (idParts[0].type === 'function') {
        var resolvedParts = convertIdPartsToRawAccessor(self, source, idParts).resolvedParts;

        for (var _i5 = 1; _i5 < resolvedParts.length; _i5++) {
          resolvedParts[_i5] = "[ " + resolvedParts[_i5] + " ]";
        }

        var value;

        if (loose) {
          value = tools.genStackJudge(resolvedParts.slice(1), resolvedParts[0]);
        } else {
          value = resolvedParts[0];

          for (var ri = 1; ri < resolvedParts.length; ri++) {
            value += resolvedParts[ri];
          }
        }

        source.push(ASSIGN_STATEMENT({
          lhs: idName,
          value: value
        }));
      } else {
        source.push(ASSIGN_STATEMENT({
          lhs: idName,
          value: chainedVariableRead(self, source, idParts, false, true, loose)
        }));
      }

      return {
        exp: idName,
        source: source
      };
    },
    "function": function _function(func, escape) {
      return generateFunction(this, func, false, escape);
    },
    blockStatement: function blockStatement(block) {
      return generateFunction(this, block.func, block);
    },
    expressionStatement: function expressionStatement(_expressionStatement) {
      var source = [];
      var escape = _expressionStatement.escape;
      var code;
      var expression = _expressionStatement.value;
      var type = expression.type;
      var expressionOrVariable;
      code = this[type](expression, escape);
      pushToArray(source, code.source);
      expressionOrVariable = code.exp;
      source.push((escape ? BUFFER_WRITE_ESCAPED : BUFFER_WRITE)({
        value: expressionOrVariable
      }));
      return {
        exp: '',
        source: source
      };
    },
    contentStatement: function contentStatement(_contentStatement) {
      return {
        exp: '',
        source: [BUFFER_APPEND({
          value: wrapBySingleQuote(escapeString(_contentStatement.value, 0))
        })]
      };
    }
  };
  var anonymousCount = 0;
  /**
   * compiler for xtemplate
   * @class XTemplate.Compiler
   * @singleton
   */

  var compiler = {
    /**
     * get ast of template
     * @param {String} [name] xtemplate name
     * @param {String} tplContent
     * @return {Object}
     */
    parse: function parse(tplContent, name) {
      if (tplContent) {
        var ret;

        try {
          parser.lexer.filename = name;
          ret = parser.parse(tplContent, name);
        } catch (err) {
          var e;

          if (err instanceof Error) {
            e = err;
          } else {
            e = new Error(err);
          }

          var errorStr = 'XTemplate error ';

          try {
            e.stack = errorStr + e.stack;
            e.message = errorStr + e.message;
          } catch (e2) {// empty
          }

          throw e;
        }

        return ret;
      }

      return {
        statements: []
      };
    },
    compileToCode: function compileToCode(param) {
      var func = compiler.compileToJson(param);
      return {
        func: FUNC({
          functionName: param.functionName || '',
          params: func.params.join(','),
          body: func.source
        }),
        imports: func.imports.join('\n')
      };
    },

    /**
     * get template function json format
     * @param {String} [param.name] xtemplate name
     * @param {String} param.content
     * @param {Boolean} [param.isModule] whether generated function is used in module
     * @param {Boolean} [param.withSuffix] whether generated require name with suffix xtpl
     * @param {Boolean} [param.catchError] whether to try catch generated function to
     * provide good error message
     * @param {Boolean} [param.strict] whether to generate strict function
     * @return {Object}
     */
    compileToJson: function compileToJson(param) {
      resetGlobal();
      var name = param.name = param.name || "xtemplate" + ++anonymousCount;
      var content = param.content;
      var root = compiler.parse(content, name);
      return genTopFunction(new AstToJSProcessor(param), root.statements);
    },

    /**
     * get template function
     * @param {String} tplContent
     * @param {String} name template file name
     * @param {Object} config
     * @return {Function}
     */
    compile: function compile(tplContent, name, config) {
      var code = compiler.compileToJson(Object.assign({}, config, {
        content: tplContent,
        name: name
      }));
      var source = code.source;
      source += SOURCE_URL({
        name: name
      });
      var args = code.params.concat(source); // eval is not ok for eval("(function(){})") ie

      return Function.apply(null, args);
    }
  };
  /*
   todo:
   need oop, new Source().this()
   */

  exports.default = compiler;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
